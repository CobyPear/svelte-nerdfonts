{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Icon.svelte",
    "App.svelte",
    "ImportCode.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n    export let data;\n    let className;\n\n    export { className as class };\n    \n</script>\n\n<svg aria-label=\"{data.iconname}\"\n    viewBox=\"{data.viewbox}\"\n    class=\"icon {className}\">\n    {#each data.paths as path}\n        <path d=\"{path}\"/>\n    {/each}\n</svg>\n\n\n<style>\n    svg {\n        transform: translateY(20%);\n        display: inline-block;\n        fill: currentColor;\n        height: 1em;\n        overflow: visible;\n    }\n\n</style>\n",
    "<input type=\"text\" bind:value=\"{query}\"/>\n<button on:click=\"{()=>showLabels = !showLabels}\">\n    { showLabels ? 'Hide' : 'Show' } Labels\n</button>\n<main>\n    \n    <section class=\"icons\" class:showlabels=\"{showLabels}\">\n        {#each Object.entries(groupIcons(displayIcons)) as [group, icons]}\n            <div>{group}</div>\n            {#each icons as icon} \n                <button class=\"iconbutton\" on:click=\"{ () => toggle(icon) }\">\n                <Icon data=\"{icon}\" />\n                <div class=\"name\">{ icon.name }</div>\n                <div class=\"group\">{ icon.group }</div>\n            </button>\n            {/each}\n        {/each}\n    </section>\n\n    <section class=\"code\">\n        <ImportCode icons=\"{selectedIcons}\" group />\n        <ImportCode icons=\"{selectedIcons}\" />\n    </section>\n</main>\n\n<script>\n    import Icon from '../components';\n    import * as icons from '../icons';\n    import ImportCode from './ImportCode.svelte';\n    \n    let iconList = Object.entries(icons)\n        .map(([k, v]) => {\n            v.group = k.split(/[A-Z]/)[0];\n            v.name = k.replace(new RegExp(v.group), '');\n            v.name = v.name.replace(/^\\w/, (m) => m.toLowerCase());\n            v.fullname = k;\n            return v;\n        });\n\n    let query = '';\n    let displayIcons = [];\n    let selectedIcons = [];\n    let showLabels = true;\n\n\n    $: {\n        query;\n        search();\n    }\n\n    function search(){\n        displayIcons = iconList.filter(icon =>\n            icon.fullname.toLowerCase().includes(query)\n        )//.slice(0, 50); \n    }\n    \n\n    function toggle(icon){\n        let index = selectedIcons.indexOf(icon);\n        if(index >= 0){\n            selectedIcons.splice(index, 1);\n            selectedIcons = selectedIcons;\n        } else {\n            selectedIcons = [...selectedIcons, icon]\n        }\n\n    }\n    \n    function groupIcons(icons){\n        return icons.reduce((a, v) => {\n            a[v.group] = [...(a[v.group] || []), v];\n            return a;\n        }, {});\n    }\n\n</script>\n\n<style>\n    main {\n        display: grid;\n        grid-template-columns: 1fr 350px;\n    }\n\n    .iconbutton {\n        width: 2em;\n        margin: 5px;\n        font-size: 2em;\n    }\n\n    .showlabels .iconbutton {\n        width: 4em;\n    }\n\n\n    .name, .group {\n        display: none;\n    }\n\n    .showlabels .name,\n    .showlabels .group {\n        display: block;\n    }\n\n    .name {\n        margin-top: 10px;\n        font-size: 14px;\n    }\n\n    .group {\n        font-size: 10px;\n        font-style: italic;\n    }\n\n    section.code {\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-gap: 1em;\n    }\n</style>\n",
    "<script>\n    \n    export let icons = [];\n    export let field = 'fullname';\n    export let group = false;\n\n    let codeBlock;\n\n    function createImport(icons, field='fullname', groupname){\n        let whitespace = icons.length > 0 ? '\\n' : ' ';\n        let tab = icons.length > 0 ? '    ' : '';\n        let seperator = ',' + whitespace;\n        let names = icons.map(i => tab + i[field]);\n        \n        let output = [\n            `<span class=\"kw\">import</span> {`,\n            `${whitespace}${names.join(seperator)}${whitespace}`,\n            `}`,\n            ` <span class=\"kw\">from</span> `,\n            `'<span class=\"s\">svelte-nerdfonts/icons`,\n            `${ groupname ? '/'+groupname : ''}'</span>`\n        ]\n        return output.join('');\n    }\n\n    function createGroupedImport(icons){\n        let grouped = icons.reduce((a, v) => {\n            a[v.group] = [...(a[v.group] || []), v];\n            return a;\n        }, {});\n\n        return Object.entries(grouped)\n            .map(([k, v]) => createImport(v, 'name', k))\n            .join('\\n');\n    }\n        \n</script>\n\n<pre bind:this=\"{codeBlock}\">\n{#if group}\n{@html createGroupedImport(icons)}\n{:else}\n{@html createImport(icons, field) }\n{/if}\n</pre>\n\n<style>\n    pre {\n        background: #eee;\n        padding: 1em;\n    }\n\n    :global(.kw) {\n        color: red;\n    }\n    \n    :global(.s) {\n        color: blue;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAmBI,GAAG,cAAC,CAAC,AACD,SAAS,CAAE,WAAW,GAAG,CAAC,CAC1B,OAAO,CAAE,YAAY,CACrB,IAAI,CAAE,YAAY,CAClB,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,OAAO,AACrB,CAAC;ACqDD,IAAI,4BAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,KAAK,AACpC,CAAC,AAED,WAAW,4BAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,SAAS,CAAE,GAAG,AAClB,CAAC,AAED,yBAAW,CAAC,WAAW,cAAC,CAAC,AACrB,KAAK,CAAE,GAAG,AACd,CAAC,AAGD,iCAAK,CAAE,MAAM,4BAAC,CAAC,AACX,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,yBAAW,CAAC,mBAAK,CACjB,yBAAW,CAAC,MAAM,cAAC,CAAC,AAChB,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,KAAK,4BAAC,CAAC,AACH,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,AACnB,CAAC,AAED,MAAM,4BAAC,CAAC,AACJ,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,OAAO,KAAK,4BAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAC1B,QAAQ,CAAE,GAAG,AACjB,CAAC;ACtED,GAAG,cAAC,CAAC,AACD,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,GAAG,AAChB,CAAC,AAEO,GAAG,AAAE,CAAC,AACV,KAAK,CAAE,GAAG,AACd,CAAC,AAEO,EAAE,AAAE,CAAC,AACT,KAAK,CAAE,IAAI,AACf,CAAC"
}